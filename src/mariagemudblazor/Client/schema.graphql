schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"columns and relationships of \"Invite\""
type Invite {
  id: Int!
  mail: String
  nom: String!
  prenom: String!
  presence: Boolean
}

"aggregated selection of \"Invite\""
type Invite_aggregate {
  aggregate: Invite_aggregate_fields
  nodes: [Invite!]!
}

"aggregate fields of \"Invite\""
type Invite_aggregate_fields {
  avg: Invite_avg_fields
  count(columns: [Invite_select_column!] distinct: Boolean): Int!
  max: Invite_max_fields
  min: Invite_min_fields
  stddev: Invite_stddev_fields
  stddev_pop: Invite_stddev_pop_fields
  stddev_samp: Invite_stddev_samp_fields
  sum: Invite_sum_fields
  var_pop: Invite_var_pop_fields
  var_samp: Invite_var_samp_fields
  variance: Invite_variance_fields
}

"aggregate avg on columns"
type Invite_avg_fields {
  id: Float
}

"Boolean expression to filter rows from the table \"Invite\". All fields are combined with a logical 'AND'."
input Invite_bool_exp {
  _and: [Invite_bool_exp!]
  _not: Invite_bool_exp
  _or: [Invite_bool_exp!]
  id: Int_comparison_exp
  mail: String_comparison_exp
  nom: String_comparison_exp
  prenom: String_comparison_exp
  presence: Boolean_comparison_exp
}

"unique or primary key constraints on table \"Invite\""
enum Invite_constraint {
  "unique or primary key constraint on columns \"id\""
  Invite_pkey
}

"input type for incrementing numeric columns in table \"Invite\""
input Invite_inc_input {
  id: Int
}

"input type for inserting data into table \"Invite\""
input Invite_insert_input {
  id: Int
  mail: String
  nom: String
  prenom: String
  presence: Boolean
}

"aggregate max on columns"
type Invite_max_fields {
  id: Int
  mail: String
  nom: String
  prenom: String
}

"aggregate min on columns"
type Invite_min_fields {
  id: Int
  mail: String
  nom: String
  prenom: String
}

"response of any mutation on the table \"Invite\""
type Invite_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Invite!]!
}

"on_conflict condition type for table \"Invite\""
input Invite_on_conflict {
  constraint: Invite_constraint!
  update_columns: [Invite_update_column!]! = [  ]
  where: Invite_bool_exp
}

"Ordering options when selecting data from \"Invite\"."
input Invite_order_by {
  id: order_by
  mail: order_by
  nom: order_by
  prenom: order_by
  presence: order_by
}

"primary key columns input for table: Invite"
input Invite_pk_columns_input {
  id: Int!
}

"select columns of table \"Invite\""
enum Invite_select_column {
  "column name"
  id
  "column name"
  mail
  "column name"
  nom
  "column name"
  prenom
  "column name"
  presence
}

"input type for updating data in table \"Invite\""
input Invite_set_input {
  id: Int
  mail: String
  nom: String
  prenom: String
  presence: Boolean
}

"aggregate stddev on columns"
type Invite_stddev_fields {
  id: Float
}

"aggregate stddev_pop on columns"
type Invite_stddev_pop_fields {
  id: Float
}

"aggregate stddev_samp on columns"
type Invite_stddev_samp_fields {
  id: Float
}

"Streaming cursor of the table \"Invite\""
input Invite_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: Invite_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input Invite_stream_cursor_value_input {
  id: Int
  mail: String
  nom: String
  prenom: String
  presence: Boolean
}

"aggregate sum on columns"
type Invite_sum_fields {
  id: Int
}

"update columns of table \"Invite\""
enum Invite_update_column {
  "column name"
  id
  "column name"
  mail
  "column name"
  nom
  "column name"
  prenom
  "column name"
  presence
}

input Invite_updates {
  "increments the numeric columns with given value of the filtered values"
  _inc: Invite_inc_input
  "sets the columns of the filtered rows to the given values"
  _set: Invite_set_input
  where: Invite_bool_exp!
}

"aggregate var_pop on columns"
type Invite_var_pop_fields {
  id: Float
}

"aggregate var_samp on columns"
type Invite_var_samp_fields {
  id: Float
}

"aggregate variance on columns"
type Invite_variance_fields {
  id: Float
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}

"ordering argument of a cursor"
enum cursor_ordering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}

"mutation root"
type mutation_root {
  "delete data from the table: \"Invite\""
  delete_Invite("filter the rows which have to be deleted" where: Invite_bool_exp!): Invite_mutation_response
  "delete single row from the table: \"Invite\""
  delete_Invite_by_pk(id: Int!): Invite
  "insert data into the table: \"Invite\""
  insert_Invite("the rows to be inserted" objects: [Invite_insert_input!]! "upsert condition" on_conflict: Invite_on_conflict): Invite_mutation_response
  "insert a single row into the table: \"Invite\""
  insert_Invite_one("the row to be inserted" object: Invite_insert_input! "upsert condition" on_conflict: Invite_on_conflict): Invite
  "update data of the table: \"Invite\""
  update_Invite("increments the numeric columns with given value of the filtered values" _inc: Invite_inc_input "sets the columns of the filtered rows to the given values" _set: Invite_set_input "filter the rows which have to be updated" where: Invite_bool_exp!): Invite_mutation_response
  "update single row of the table: \"Invite\""
  update_Invite_by_pk("increments the numeric columns with given value of the filtered values" _inc: Invite_inc_input "sets the columns of the filtered rows to the given values" _set: Invite_set_input pk_columns: Invite_pk_columns_input!): Invite
  "update multiples rows of table: \"Invite\""
  update_Invite_many("updates to execute, in order" updates: [Invite_updates!]!): [Invite_mutation_response]
}

"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}

type query_root {
  "fetch data from the table: \"Invite\""
  Invite("distinct select on columns" distinct_on: [Invite_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [Invite_order_by!] "filter the rows returned" where: Invite_bool_exp): [Invite!]!
  "fetch aggregated fields from the table: \"Invite\""
  Invite_aggregate("distinct select on columns" distinct_on: [Invite_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [Invite_order_by!] "filter the rows returned" where: Invite_bool_exp): Invite_aggregate!
  "fetch data from the table: \"Invite\" using primary key columns"
  Invite_by_pk(id: Int!): Invite
}

type subscription_root {
  "fetch data from the table: \"Invite\""
  Invite("distinct select on columns" distinct_on: [Invite_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [Invite_order_by!] "filter the rows returned" where: Invite_bool_exp): [Invite!]!
  "fetch aggregated fields from the table: \"Invite\""
  Invite_aggregate("distinct select on columns" distinct_on: [Invite_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [Invite_order_by!] "filter the rows returned" where: Invite_bool_exp): Invite_aggregate!
  "fetch data from the table: \"Invite\" using primary key columns"
  Invite_by_pk(id: Int!): Invite
  "fetch data from the table in a streaming manner : \"Invite\""
  Invite_stream("maximum number of rows returned in a single batch" batch_size: Int! "cursor to stream the results returned by the query" cursor: [Invite_stream_cursor_input]! "filter the rows returned" where: Invite_bool_exp): [Invite!]!
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached("measured in seconds" ttl: Int! = 60 "refresh the cache entry" refresh: Boolean! = false) on QUERY